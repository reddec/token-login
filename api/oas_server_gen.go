// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateToken implements createToken operation.
	//
	// Create new token for user.
	//
	// POST /tokens
	CreateToken(ctx context.Context, req *Config) (*Credential, error)
	// DeleteToken implements deleteToken operation.
	//
	// Delete token for user.
	//
	// DELETE /tokens/{token}
	DeleteToken(ctx context.Context, params DeleteTokenParams) error
	// GetToken implements getToken operation.
	//
	// Get tokens by ID and for the current user.
	//
	// GET /tokens/{token}
	GetToken(ctx context.Context, params GetTokenParams) (*Token, error)
	// ListTokens implements listTokens operation.
	//
	// List all tokens for user.
	//
	// GET /tokens
	ListTokens(ctx context.Context) ([]Token, error)
	// RefreshToken implements refreshToken operation.
	//
	// Regenerate token key.
	//
	// POST /tokens/{token}
	RefreshToken(ctx context.Context, params RefreshTokenParams) (*Credential, error)
	// UpdateToken implements updateToken operation.
	//
	// Update token for user. Supports partial update.
	//
	// PATCH /tokens/{token}
	UpdateToken(ctx context.Context, req *Config, params UpdateTokenParams) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
