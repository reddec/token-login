// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// CreateToken invokes createToken operation.
	//
	// Create new token for user.
	//
	// POST /tokens
	CreateToken(ctx context.Context, request *Config) (*Credential, error)
	// DeleteToken invokes deleteToken operation.
	//
	// Delete token for user.
	//
	// DELETE /tokens/{token}
	DeleteToken(ctx context.Context, params DeleteTokenParams) error
	// GetToken invokes getToken operation.
	//
	// Get tokens by ID and for the current user.
	//
	// GET /tokens/{token}
	GetToken(ctx context.Context, params GetTokenParams) (*Token, error)
	// ListTokens invokes listTokens operation.
	//
	// List all tokens for user.
	//
	// GET /tokens
	ListTokens(ctx context.Context) ([]Token, error)
	// RefreshToken invokes refreshToken operation.
	//
	// Regenerate token key.
	//
	// POST /tokens/{token}
	RefreshToken(ctx context.Context, params RefreshTokenParams) (*Credential, error)
	// UpdateToken invokes updateToken operation.
	//
	// Update token for user. Supports partial update.
	//
	// PATCH /tokens/{token}
	UpdateToken(ctx context.Context, request *Config, params UpdateTokenParams) error
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// CreateToken invokes createToken operation.
//
// Create new token for user.
//
// POST /tokens
func (c *Client) CreateToken(ctx context.Context, request *Config) (*Credential, error) {
	res, err := c.sendCreateToken(ctx, request)
	return res, err
}

func (c *Client) sendCreateToken(ctx context.Context, request *Config) (res *Credential, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/tokens"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateTokenRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteToken invokes deleteToken operation.
//
// Delete token for user.
//
// DELETE /tokens/{token}
func (c *Client) DeleteToken(ctx context.Context, params DeleteTokenParams) error {
	_, err := c.sendDeleteToken(ctx, params)
	return err
}

func (c *Client) sendDeleteToken(ctx context.Context, params DeleteTokenParams) (res *DeleteTokenNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/tokens/"
	{
		// Encode "token" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "token",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Token))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetToken invokes getToken operation.
//
// Get tokens by ID and for the current user.
//
// GET /tokens/{token}
func (c *Client) GetToken(ctx context.Context, params GetTokenParams) (*Token, error) {
	res, err := c.sendGetToken(ctx, params)
	return res, err
}

func (c *Client) sendGetToken(ctx context.Context, params GetTokenParams) (res *Token, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/tokens/"
	{
		// Encode "token" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "token",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Token))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ListTokens invokes listTokens operation.
//
// List all tokens for user.
//
// GET /tokens
func (c *Client) ListTokens(ctx context.Context) ([]Token, error) {
	res, err := c.sendListTokens(ctx)
	return res, err
}

func (c *Client) sendListTokens(ctx context.Context) (res []Token, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/tokens"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeListTokensResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RefreshToken invokes refreshToken operation.
//
// Regenerate token key.
//
// POST /tokens/{token}
func (c *Client) RefreshToken(ctx context.Context, params RefreshTokenParams) (*Credential, error) {
	res, err := c.sendRefreshToken(ctx, params)
	return res, err
}

func (c *Client) sendRefreshToken(ctx context.Context, params RefreshTokenParams) (res *Credential, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/tokens/"
	{
		// Encode "token" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "token",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Token))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRefreshTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateToken invokes updateToken operation.
//
// Update token for user. Supports partial update.
//
// PATCH /tokens/{token}
func (c *Client) UpdateToken(ctx context.Context, request *Config, params UpdateTokenParams) error {
	_, err := c.sendUpdateToken(ctx, request, params)
	return err
}

func (c *Client) sendUpdateToken(ctx context.Context, request *Config, params UpdateTokenParams) (res *UpdateTokenNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/tokens/"
	{
		// Encode "token" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "token",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Token))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateTokenRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
