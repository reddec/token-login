// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteTokenParams is parameters of deleteToken operation.
type DeleteTokenParams struct {
	// Token ID.
	Token int
}

func unpackDeleteTokenParams(packed middleware.Parameters) (params DeleteTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "path",
		}
		params.Token = packed[key].(int)
	}
	return params
}

func decodeDeleteTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteTokenParams, _ error) {
	// Decode path: token.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "token",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Token = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTokenParams is parameters of getToken operation.
type GetTokenParams struct {
	// Token ID.
	Token int
}

func unpackGetTokenParams(packed middleware.Parameters) (params GetTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "path",
		}
		params.Token = packed[key].(int)
	}
	return params
}

func decodeGetTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTokenParams, _ error) {
	// Decode path: token.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "token",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Token = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RefreshTokenParams is parameters of refreshToken operation.
type RefreshTokenParams struct {
	// Token ID.
	Token int
}

func unpackRefreshTokenParams(packed middleware.Parameters) (params RefreshTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "path",
		}
		params.Token = packed[key].(int)
	}
	return params
}

func decodeRefreshTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params RefreshTokenParams, _ error) {
	// Decode path: token.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "token",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Token = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateTokenParams is parameters of updateToken operation.
type UpdateTokenParams struct {
	// Token ID.
	Token int
}

func unpackUpdateTokenParams(packed middleware.Parameters) (params UpdateTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "path",
		}
		params.Token = packed[key].(int)
	}
	return params
}

func decodeUpdateTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateTokenParams, _ error) {
	// Decode path: token.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "token",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Token = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
