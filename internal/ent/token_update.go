// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/reddec/token-login/internal/ent/predicate"
	"github.com/reddec/token-login/internal/ent/token"
	"github.com/reddec/token-login/internal/types"
)

// TokenUpdate is the builder for updating Token entities.
type TokenUpdate struct {
	config
	hooks    []Hook
	mutation *TokenMutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (tu *TokenUpdate) Where(ps ...predicate.Token) *TokenUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TokenUpdate) SetCreatedAt(t time.Time) *TokenUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableCreatedAt(t *time.Time) *TokenUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TokenUpdate) SetUpdatedAt(t time.Time) *TokenUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetKeyID sets the "key_id" field.
func (tu *TokenUpdate) SetKeyID(ti *types.KeyID) *TokenUpdate {
	tu.mutation.SetKeyID(ti)
	return tu
}

// SetHash sets the "hash" field.
func (tu *TokenUpdate) SetHash(b []byte) *TokenUpdate {
	tu.mutation.SetHash(b)
	return tu
}

// SetUser sets the "user" field.
func (tu *TokenUpdate) SetUser(s string) *TokenUpdate {
	tu.mutation.SetUser(s)
	return tu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableUser(s *string) *TokenUpdate {
	if s != nil {
		tu.SetUser(*s)
	}
	return tu
}

// SetLabel sets the "label" field.
func (tu *TokenUpdate) SetLabel(s string) *TokenUpdate {
	tu.mutation.SetLabel(s)
	return tu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableLabel(s *string) *TokenUpdate {
	if s != nil {
		tu.SetLabel(*s)
	}
	return tu
}

// SetPath sets the "path" field.
func (tu *TokenUpdate) SetPath(s string) *TokenUpdate {
	tu.mutation.SetPath(s)
	return tu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (tu *TokenUpdate) SetNillablePath(s *string) *TokenUpdate {
	if s != nil {
		tu.SetPath(*s)
	}
	return tu
}

// SetHost sets the "host" field.
func (tu *TokenUpdate) SetHost(s string) *TokenUpdate {
	tu.mutation.SetHost(s)
	return tu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableHost(s *string) *TokenUpdate {
	if s != nil {
		tu.SetHost(*s)
	}
	return tu
}

// SetHeaders sets the "headers" field.
func (tu *TokenUpdate) SetHeaders(t types.Headers) *TokenUpdate {
	tu.mutation.SetHeaders(t)
	return tu
}

// AppendHeaders appends t to the "headers" field.
func (tu *TokenUpdate) AppendHeaders(t types.Headers) *TokenUpdate {
	tu.mutation.AppendHeaders(t)
	return tu
}

// ClearHeaders clears the value of the "headers" field.
func (tu *TokenUpdate) ClearHeaders() *TokenUpdate {
	tu.mutation.ClearHeaders()
	return tu
}

// SetRequests sets the "requests" field.
func (tu *TokenUpdate) SetRequests(i int64) *TokenUpdate {
	tu.mutation.ResetRequests()
	tu.mutation.SetRequests(i)
	return tu
}

// SetNillableRequests sets the "requests" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableRequests(i *int64) *TokenUpdate {
	if i != nil {
		tu.SetRequests(*i)
	}
	return tu
}

// AddRequests adds i to the "requests" field.
func (tu *TokenUpdate) AddRequests(i int64) *TokenUpdate {
	tu.mutation.AddRequests(i)
	return tu
}

// SetLastAccessAt sets the "last_access_at" field.
func (tu *TokenUpdate) SetLastAccessAt(t time.Time) *TokenUpdate {
	tu.mutation.SetLastAccessAt(t)
	return tu
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableLastAccessAt(t *time.Time) *TokenUpdate {
	if t != nil {
		tu.SetLastAccessAt(*t)
	}
	return tu
}

// Mutation returns the TokenMutation object of the builder.
func (tu *TokenUpdate) Mutation() *TokenMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TokenUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TokenUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TokenUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TokenUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := token.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TokenUpdate) check() error {
	if v, ok := tu.mutation.Hash(); ok {
		if err := token.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Token.hash": %w`, err)}
		}
	}
	return nil
}

func (tu *TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(token.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.KeyID(); ok {
		vv, err := token.ValueScanner.KeyID.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(token.FieldKeyID, field.TypeString, vv)
	}
	if value, ok := tu.mutation.Hash(); ok {
		_spec.SetField(token.FieldHash, field.TypeBytes, value)
	}
	if value, ok := tu.mutation.User(); ok {
		_spec.SetField(token.FieldUser, field.TypeString, value)
	}
	if value, ok := tu.mutation.Label(); ok {
		_spec.SetField(token.FieldLabel, field.TypeString, value)
	}
	if value, ok := tu.mutation.Path(); ok {
		_spec.SetField(token.FieldPath, field.TypeString, value)
	}
	if value, ok := tu.mutation.Host(); ok {
		_spec.SetField(token.FieldHost, field.TypeString, value)
	}
	if value, ok := tu.mutation.Headers(); ok {
		_spec.SetField(token.FieldHeaders, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedHeaders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, token.FieldHeaders, value)
		})
	}
	if tu.mutation.HeadersCleared() {
		_spec.ClearField(token.FieldHeaders, field.TypeJSON)
	}
	if value, ok := tu.mutation.Requests(); ok {
		_spec.SetField(token.FieldRequests, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedRequests(); ok {
		_spec.AddField(token.FieldRequests, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.LastAccessAt(); ok {
		_spec.SetField(token.FieldLastAccessAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TokenUpdateOne is the builder for updating a single Token entity.
type TokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenMutation
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TokenUpdateOne) SetCreatedAt(t time.Time) *TokenUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableCreatedAt(t *time.Time) *TokenUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TokenUpdateOne) SetUpdatedAt(t time.Time) *TokenUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetKeyID sets the "key_id" field.
func (tuo *TokenUpdateOne) SetKeyID(ti *types.KeyID) *TokenUpdateOne {
	tuo.mutation.SetKeyID(ti)
	return tuo
}

// SetHash sets the "hash" field.
func (tuo *TokenUpdateOne) SetHash(b []byte) *TokenUpdateOne {
	tuo.mutation.SetHash(b)
	return tuo
}

// SetUser sets the "user" field.
func (tuo *TokenUpdateOne) SetUser(s string) *TokenUpdateOne {
	tuo.mutation.SetUser(s)
	return tuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableUser(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetUser(*s)
	}
	return tuo
}

// SetLabel sets the "label" field.
func (tuo *TokenUpdateOne) SetLabel(s string) *TokenUpdateOne {
	tuo.mutation.SetLabel(s)
	return tuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableLabel(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetLabel(*s)
	}
	return tuo
}

// SetPath sets the "path" field.
func (tuo *TokenUpdateOne) SetPath(s string) *TokenUpdateOne {
	tuo.mutation.SetPath(s)
	return tuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillablePath(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetPath(*s)
	}
	return tuo
}

// SetHost sets the "host" field.
func (tuo *TokenUpdateOne) SetHost(s string) *TokenUpdateOne {
	tuo.mutation.SetHost(s)
	return tuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableHost(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetHost(*s)
	}
	return tuo
}

// SetHeaders sets the "headers" field.
func (tuo *TokenUpdateOne) SetHeaders(t types.Headers) *TokenUpdateOne {
	tuo.mutation.SetHeaders(t)
	return tuo
}

// AppendHeaders appends t to the "headers" field.
func (tuo *TokenUpdateOne) AppendHeaders(t types.Headers) *TokenUpdateOne {
	tuo.mutation.AppendHeaders(t)
	return tuo
}

// ClearHeaders clears the value of the "headers" field.
func (tuo *TokenUpdateOne) ClearHeaders() *TokenUpdateOne {
	tuo.mutation.ClearHeaders()
	return tuo
}

// SetRequests sets the "requests" field.
func (tuo *TokenUpdateOne) SetRequests(i int64) *TokenUpdateOne {
	tuo.mutation.ResetRequests()
	tuo.mutation.SetRequests(i)
	return tuo
}

// SetNillableRequests sets the "requests" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableRequests(i *int64) *TokenUpdateOne {
	if i != nil {
		tuo.SetRequests(*i)
	}
	return tuo
}

// AddRequests adds i to the "requests" field.
func (tuo *TokenUpdateOne) AddRequests(i int64) *TokenUpdateOne {
	tuo.mutation.AddRequests(i)
	return tuo
}

// SetLastAccessAt sets the "last_access_at" field.
func (tuo *TokenUpdateOne) SetLastAccessAt(t time.Time) *TokenUpdateOne {
	tuo.mutation.SetLastAccessAt(t)
	return tuo
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableLastAccessAt(t *time.Time) *TokenUpdateOne {
	if t != nil {
		tuo.SetLastAccessAt(*t)
	}
	return tuo
}

// Mutation returns the TokenMutation object of the builder.
func (tuo *TokenUpdateOne) Mutation() *TokenMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (tuo *TokenUpdateOne) Where(ps ...predicate.Token) *TokenUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TokenUpdateOne) Select(field string, fields ...string) *TokenUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Token entity.
func (tuo *TokenUpdateOne) Save(ctx context.Context) (*Token, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TokenUpdateOne) SaveX(ctx context.Context) *Token {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TokenUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TokenUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := token.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TokenUpdateOne) check() error {
	if v, ok := tuo.mutation.Hash(); ok {
		if err := token.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Token.hash": %w`, err)}
		}
	}
	return nil
}

func (tuo *TokenUpdateOne) sqlSave(ctx context.Context) (_node *Token, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, token.FieldID)
		for _, f := range fields {
			if !token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(token.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.KeyID(); ok {
		vv, err := token.ValueScanner.KeyID.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(token.FieldKeyID, field.TypeString, vv)
	}
	if value, ok := tuo.mutation.Hash(); ok {
		_spec.SetField(token.FieldHash, field.TypeBytes, value)
	}
	if value, ok := tuo.mutation.User(); ok {
		_spec.SetField(token.FieldUser, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Label(); ok {
		_spec.SetField(token.FieldLabel, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Path(); ok {
		_spec.SetField(token.FieldPath, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Host(); ok {
		_spec.SetField(token.FieldHost, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Headers(); ok {
		_spec.SetField(token.FieldHeaders, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedHeaders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, token.FieldHeaders, value)
		})
	}
	if tuo.mutation.HeadersCleared() {
		_spec.ClearField(token.FieldHeaders, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Requests(); ok {
		_spec.SetField(token.FieldRequests, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedRequests(); ok {
		_spec.AddField(token.FieldRequests, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.LastAccessAt(); ok {
		_spec.SetField(token.FieldLastAccessAt, field.TypeTime, value)
	}
	_node = &Token{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
