// Code generated by ent, DO NOT EDIT.

package token

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
	"github.com/reddec/token-login/internal/types"
)

const (
	// Label holds the string label denoting the token type in the database.
	Label = "token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKeyID holds the string denoting the key_id field in the database.
	FieldKeyID = "key_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldHeaders holds the string denoting the headers field in the database.
	FieldHeaders = "headers"
	// FieldRequests holds the string denoting the requests field in the database.
	FieldRequests = "requests"
	// FieldLastAccessAt holds the string denoting the last_access_at field in the database.
	FieldLastAccessAt = "last_access_at"
	// Table holds the table name of the token in the database.
	Table = "token"
)

// Columns holds all SQL columns for token fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKeyID,
	FieldHash,
	FieldUser,
	FieldLabel,
	FieldPath,
	FieldHost,
	FieldHeaders,
	FieldRequests,
	FieldLastAccessAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func([]byte) error
	// DefaultLabel holds the default value on creation for the "label" field.
	DefaultLabel string
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
	// DefaultRequests holds the default value on creation for the "requests" field.
	DefaultRequests int64
	// DefaultLastAccessAt holds the default value on creation for the "last_access_at" field.
	DefaultLastAccessAt func() time.Time
	// ValueScanner of all Token fields.
	ValueScanner struct {
		KeyID field.TypeValueScanner[*types.KeyID]
	}
)

// OrderOption defines the ordering options for the Token queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByKeyID orders the results by the key_id field.
func ByKeyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyID, opts...).ToFunc()
}

// ByUser orders the results by the user field.
func ByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUser, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByRequests orders the results by the requests field.
func ByRequests(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequests, opts...).ToFunc()
}

// ByLastAccessAt orders the results by the last_access_at field.
func ByLastAccessAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAccessAt, opts...).ToFunc()
}
