// Code generated by ent, DO NOT EDIT.

package token

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/reddec/token-login/internal/ent/predicate"
	"github.com/reddec/token-login/internal/types"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUpdatedAt, v))
}

// KeyID applies equality check predicate on the "key_id" field. It's identical to KeyIDEQ.
func KeyID(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldEQ(FieldKeyID, vc), err)
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v []byte) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldHash, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUser, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldPath, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldHost, v))
}

// Requests applies equality check predicate on the "requests" field. It's identical to RequestsEQ.
func Requests(v int64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldRequests, v))
}

// LastAccessAt applies equality check predicate on the "last_access_at" field. It's identical to LastAccessAtEQ.
func LastAccessAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldLastAccessAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldUpdatedAt, v))
}

// KeyIDEQ applies the EQ predicate on the "key_id" field.
func KeyIDEQ(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldEQ(FieldKeyID, vc), err)
}

// KeyIDNEQ applies the NEQ predicate on the "key_id" field.
func KeyIDNEQ(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldNEQ(FieldKeyID, vc), err)
}

// KeyIDIn applies the In predicate on the "key_id" field.
func KeyIDIn(vs ...*types.KeyID) predicate.Token {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.KeyID.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TokenOrErr(sql.FieldIn(FieldKeyID, v...), err)
}

// KeyIDNotIn applies the NotIn predicate on the "key_id" field.
func KeyIDNotIn(vs ...*types.KeyID) predicate.Token {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.KeyID.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TokenOrErr(sql.FieldNotIn(FieldKeyID, v...), err)
}

// KeyIDGT applies the GT predicate on the "key_id" field.
func KeyIDGT(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldGT(FieldKeyID, vc), err)
}

// KeyIDGTE applies the GTE predicate on the "key_id" field.
func KeyIDGTE(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldGTE(FieldKeyID, vc), err)
}

// KeyIDLT applies the LT predicate on the "key_id" field.
func KeyIDLT(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldLT(FieldKeyID, vc), err)
}

// KeyIDLTE applies the LTE predicate on the "key_id" field.
func KeyIDLTE(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	return predicate.TokenOrErr(sql.FieldLTE(FieldKeyID, vc), err)
}

// KeyIDContains applies the Contains predicate on the "key_id" field.
func KeyIDContains(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("key_id value is not a string: %T", vc)
	}
	return predicate.TokenOrErr(sql.FieldContains(FieldKeyID, vcs), err)
}

// KeyIDHasPrefix applies the HasPrefix predicate on the "key_id" field.
func KeyIDHasPrefix(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("key_id value is not a string: %T", vc)
	}
	return predicate.TokenOrErr(sql.FieldHasPrefix(FieldKeyID, vcs), err)
}

// KeyIDHasSuffix applies the HasSuffix predicate on the "key_id" field.
func KeyIDHasSuffix(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("key_id value is not a string: %T", vc)
	}
	return predicate.TokenOrErr(sql.FieldHasSuffix(FieldKeyID, vcs), err)
}

// KeyIDEqualFold applies the EqualFold predicate on the "key_id" field.
func KeyIDEqualFold(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("key_id value is not a string: %T", vc)
	}
	return predicate.TokenOrErr(sql.FieldEqualFold(FieldKeyID, vcs), err)
}

// KeyIDContainsFold applies the ContainsFold predicate on the "key_id" field.
func KeyIDContainsFold(v *types.KeyID) predicate.Token {
	vc, err := ValueScanner.KeyID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("key_id value is not a string: %T", vc)
	}
	return predicate.TokenOrErr(sql.FieldContainsFold(FieldKeyID, vcs), err)
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v []byte) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v []byte) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...[]byte) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...[]byte) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v []byte) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v []byte) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v []byte) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v []byte) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldHash, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldUser, v))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldUser, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldLabel, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldPath, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldHost, v))
}

// HeadersIsNil applies the IsNil predicate on the "headers" field.
func HeadersIsNil() predicate.Token {
	return predicate.Token(sql.FieldIsNull(FieldHeaders))
}

// HeadersNotNil applies the NotNil predicate on the "headers" field.
func HeadersNotNil() predicate.Token {
	return predicate.Token(sql.FieldNotNull(FieldHeaders))
}

// RequestsEQ applies the EQ predicate on the "requests" field.
func RequestsEQ(v int64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldRequests, v))
}

// RequestsNEQ applies the NEQ predicate on the "requests" field.
func RequestsNEQ(v int64) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldRequests, v))
}

// RequestsIn applies the In predicate on the "requests" field.
func RequestsIn(vs ...int64) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldRequests, vs...))
}

// RequestsNotIn applies the NotIn predicate on the "requests" field.
func RequestsNotIn(vs ...int64) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldRequests, vs...))
}

// RequestsGT applies the GT predicate on the "requests" field.
func RequestsGT(v int64) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldRequests, v))
}

// RequestsGTE applies the GTE predicate on the "requests" field.
func RequestsGTE(v int64) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldRequests, v))
}

// RequestsLT applies the LT predicate on the "requests" field.
func RequestsLT(v int64) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldRequests, v))
}

// RequestsLTE applies the LTE predicate on the "requests" field.
func RequestsLTE(v int64) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldRequests, v))
}

// LastAccessAtEQ applies the EQ predicate on the "last_access_at" field.
func LastAccessAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldLastAccessAt, v))
}

// LastAccessAtNEQ applies the NEQ predicate on the "last_access_at" field.
func LastAccessAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldLastAccessAt, v))
}

// LastAccessAtIn applies the In predicate on the "last_access_at" field.
func LastAccessAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldLastAccessAt, vs...))
}

// LastAccessAtNotIn applies the NotIn predicate on the "last_access_at" field.
func LastAccessAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldLastAccessAt, vs...))
}

// LastAccessAtGT applies the GT predicate on the "last_access_at" field.
func LastAccessAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldLastAccessAt, v))
}

// LastAccessAtGTE applies the GTE predicate on the "last_access_at" field.
func LastAccessAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldLastAccessAt, v))
}

// LastAccessAtLT applies the LT predicate on the "last_access_at" field.
func LastAccessAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldLastAccessAt, v))
}

// LastAccessAtLTE applies the LTE predicate on the "last_access_at" field.
func LastAccessAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldLastAccessAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Token) predicate.Token {
	return predicate.Token(sql.NotPredicates(p))
}
